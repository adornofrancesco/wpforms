function wpf_entries_table_invio_soci( $atts ) {
  
    // Pull ID shortcode attributes.
    $atts = shortcode_atts(
    [
        'id'     => '',
        'user'   => '',
        'fields' => '',
        'number' => '',
        'type'   => 'all', // all, unread, read, or starred.
        'sort'   => '',
        'order'  => 'asc',
    ],
    $atts
    );
  
    // Check for an ID attribute (required) and that WPForms is in fact
    // installed and activated.
    if ( empty( $atts['id'] ) || ! function_exists( 'wpforms' ) ) {
        return;
    }
  
    // Get the form, from the ID provided in the shortcode.
    $form = wpforms()->form->get( absint( $atts['id'] ) );
  
    // If the form doesn't exist, abort.
    if ( empty( $form ) ) {
        return;
    }
  
    // Pull and format the form data out of the form object.
    $form_data = ! empty( $form->post_content ) ? wpforms_decode( $form->post_content ) : '';
  
    // Check to see if we are showing all allowed fields, or only specific ones.
    $form_field_ids = isset( $atts['fields'] ) && $atts['fields'] !== '' ? explode( ',', str_replace( ' ', '', $atts['fields'] ) ) : [];
  
    // Setup the form fields.
    if ( empty( $form_field_ids ) ) {
        $form_fields = $form_data['fields'];
    } else {
        $form_fields = [];
        foreach ( $form_field_ids as $field_id ) {
            if ( isset( $form_data['fields'][$field_id] ) ) {
                $form_fields[$field_id] = $form_data['fields'][$field_id];
            }
        }
    }
  
    if ( empty( $form_fields ) ) {
        return;
    }
  
    // Define the types of form fields we do NOT want to include.
    $form_fields_disallow = apply_filters( 'wpforms_frontend_entries_table_disallow', [ 'divider', 'html', 'pagebreak', 'captcha' ] );
  
    // Remove disallowed field types.
    foreach ( $form_fields as $field_id => $form_field ) {
        if ( in_array( $form_field['type'], $form_fields_disallow, true ) ) {
            unset( $form_fields[$field_id] );
        }
    }
  
    $entries_args = [
        'form_id' => absint( $atts['id'] ),
    ];
  
    // Narrow entries by user if user_id shortcode attribute was used.
    // Only include entries from the current logged-in user.
    if ( is_user_logged_in() ) {
        $entries_args['user_id'] = get_current_user_id();
    } else {
        // If user is not logged in, return no entries.
        return '<p>Please log in to see your entries.</p>';
    }
  
    // Number of entries to show. If empty, defaults to 30.
    if ( ! empty( $atts['number'] ) ) {
        $entries_args['number'] = absint( $atts['number'] );
    }
  
    // Filter the type of entries: all, unread, read, or starred.
    if ( $atts['type'] === 'unread' ) {
        $entries_args['viewed'] = '0';
    } elseif ( $atts['type'] === 'read' ) {
        $entries_args['viewed'] = '1';
    } elseif ( $atts['type'] === 'starred' ) {
        $entries_args['starred'] = '1';
    }
  
    // Get all entries for the form, according to arguments defined.
    $entries = json_decode(json_encode(wpforms()->entry->get_entries( $entries_args )), true);
  
    if ( empty( $entries ) ) {
        return '<p>Nessun documento</p>';
    }
  
    foreach($entries as $key => $entry) {
        $entries[$key]['fields'] = json_decode($entry['fields'], true);
        $entries[$key]['meta'] = json_decode($entry['meta'], true);
		// Format the date
        $entries[$key]['date_created'] = date( 'd/m/Y g:i a', strtotime( $entry['date_created'] ) );
    }
  
    if ( !empty($atts['sort']) && isset($entries[0]['fields'][$atts['sort']] ) ) {
        if ( strtolower($atts['order']) == 'asc' ) {
            usort($entries, function ($entry1, $entry2) use ($atts) {
                return strcmp($entry1['fields'][$atts['sort']]['value'], $entry2['fields'][$atts['sort']]['value']);
            });
        } elseif ( strtolower($atts['order']) == 'desc' ) {
            usort($entries, function ($entry1, $entry2) use ($atts) {
                return strcmp($entry2['fields'][$atts['sort']]['value'], $entry1['fields'][$atts['sort']]['value']);
            });
        }
    }
  
    ob_start();
  
    echo '<div class="wrapper">';
    echo '<div class="list-group" data-tor-group=".list-group-item a=>timeout:class.add(documento text-federispettori-blue);">';
  
    // Now, loop through all the form entries.
    foreach ( $entries as $entry ) {
  
        echo '<div class="list-group-item allegato">';
  
        $entry_fields = $entry['fields'];
  
        // Iniziamo con Nome
        $nome = '';
        $email = '';
        $file_url = '';

        foreach ( $form_fields as $form_field ) {

            foreach ( $entry_fields as $entry_field ) {
                if ( absint( $entry_field['id'] ) === absint( $form_field['id'] ) ) {
                    // Controllo sul tipo di campo per Nome
                    if ( strtolower($form_field['label']) === 'nome' ) {
                        $nome = wp_strip_all_tags( $entry_field['value'] );
                    }

                    // Controllo sul tipo di campo per Email
                    if ( strtolower($form_field['label']) === 'email' ) {
                        $email = wp_strip_all_tags( $entry_field['value'] );
                    }

                    // Controllo sul tipo di campo per URL file
                    if ( strtolower($form_field['type']) === 'file-upload' ) {
                        $file_url = esc_url( $entry_field['value'] );
                    }
                }
            }
        }

        // Output dei valori
        echo '<div class="d-flex flex-column flex-sm-row align-items-lg-center justify-content-between gap-2 fs-13px text-federispettori-blue">';
        //echo '<span class="label"><i class="bi bi-file-earmark-text align-middle"></i></span>';

        if ($nome) {
            echo '<div class="nome"><div class="fs-12px">Utente:</div><div class="fw-600"> ' . esc_html( $nome ) . '</div></div>';
        }

        if ($email) {
            echo '<div class="email"><div class="fs-12px">E-mail:</div><div class="fw-600"> ' . esc_html( $email ) . '</div></div>';
        }

        if ($file_url) {
            echo '<div class="file"><div class="fs-12px">Allegato:</div><span class="label"><i class="bi bi-file-earmark-text fs-13px me-1"></i></span><a nodownload class="stretched--link documento text-federispettori-blue fw-600 fs-13px" href="' . $file_url . '" target="_blank">Scarica il file</a></div>';
        }

        // Visualizzazione della data di invio
        //echo '<span class="date-created d-flex">Inviato il ' . esc_html( $entry['date_created'] ) . '</span>';

        echo '</div>';
        echo '</div>';
    }
  
    echo '</div>';
    echo '</div>';
  
    $output = ob_get_clean();
  
    return $output;
}
  
add_shortcode( 'wpforms_entries_table_invio_soci', 'wpf_entries_table_invio_soci' );




/***************************************************/
/*******          HOW TO SHOW                 ******/
/***************************************************/

Custom shortcode ---> [wpforms_entries_table_invio_soci id="13209"]  <--- where id="" your form ID
